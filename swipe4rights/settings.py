"""
Django settings for swipe4rights project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys
from urllib.parse import urlparse
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
import djcelery
from typing import List

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'ft4mm0t!w5hd03!&y-vmg(6lt^ql=3&8@sqs-49rn&@r26*)9p')

# Environment Setup
ENV = os.environ.get('APP_ENV', 'development')

PRODUCTION = ENV == 'production'
STAGING = ENV == 'staging'
CI_TESTING = ENV == 'ci-testing'
CIRCLE_CI = os.environ.get('CIRCLE_CI', False)

DEBUG = ENV == 'development'

TESTING = 'test' in sys.argv
IS_DOCKER = os.environ.get('DOCKER', False)
if CI_TESTING:
    TESTING = True
    DEBUG = True
TASTYPIE_FULL_DEBUG = DEBUG
TEMPLATE_DEBUG = DEBUG


ALLOWED_HOSTS = []
if DEBUG or STAGING:
    CORS_ORIGIN_ALLOW_ALL = True

if STAGING:
    staging_domains: List[str] = []
    ALLOWED_HOSTS.extend(staging_domains)
elif PRODUCTION:
    production_domains: List[str] = []
    ALLOWED_HOSTS.extend(production_domains)
    CORS_ORIGIN_WHITELIST = production_domains


if STAGING or PRODUCTION:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

AUTH_USER_MODEL = 'accounts.Account'
ACCOUNT_NATURAL_KEY = 'username'

# Application definition

INSTALLED_APPS = [
    'raven.contrib.django.raven_compat',
    'gunicorn',
    'corsheaders',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'djcelery',
    'storages',
    'django_extensions',
    'rest_framework_swagger',
    'djongo',

    'accounts',
    'bills',
    'votes',

    'rest_framework',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'swipe4rights.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'swipe4rights.wsgi.application'


# Database
DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'HOST': os.environ.get('MONGO_HOST', ''),
    }
}

if IS_DOCKER:
    DATABASES = {
        'default': {
            'ENGINE': 'django',
            'NAME': 'swipe4rights',
            'PASSWORD': 'password',
            'HOST': 'mongo',
        }
    }
elif (STAGING or PRODUCTION) and not CIRCLE_CI:
    import dj_database_url
    DATABASES['default'] = dj_database_url.config()

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa: E501
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

#  AWS / Static file setup

STATIC_URL = '/static/'
AWS_STORAGE_LOCATION_NAME = 'static'
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = False
if 'collectstatic' in sys.argv or 'compress' in sys.argv:
    AWS_S3_FILE_OVERWRITE = True
AWS_PRELOAD_METADATA = True
if not AWS_STORAGE_BUCKET_NAME and DEBUG:
    AWS_STORAGE_BUCKET_NAME = 'swipe4rights'
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % (AWS_STORAGE_BUCKET_NAME,)

AWS_S3_SECURE_URLS = True
AWS_S3_URL_PROTOCOL = 'https:'

BOTO_S3_BUCKET = AWS_STORAGE_BUCKET_NAME

if not TESTING:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

STATICFILES_DIRS = [
    os.path.join(PROJECT_ROOT, "static"),
]

MEDIA_URL = '/media/'
if DEBUG:
    STATIC_URL = '/static/'

if STAGING or PRODUCTION:
    STATIC_URL = '//%s/static/' % (AWS_S3_CUSTOM_DOMAIN,)
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

STATIC_ROOT = 'static'


# DRF Setup
REST_FRAMEWORK = {
    'PAGE_SIZE': 20,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # noqa: E501
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'COERCE_DECIMAL_TO_STRING': False,
    'UNICODE_JSON': True,
}


# Redis
local_redis = 'redis://' + \
    os.environ.get('REDIS_PORT_6379_TCP_ADDR', '127.0.0.1') + \
    ':' + os.environ.get('REDIS_PORT_6379_TCP_PORT', '6379')
redis_url = urlparse(os.environ.get('REDIS_URL', local_redis))
BROKER_URL = redis_url.geturl()


# Celery
djcelery.setup_loader()

# Sensible settings for celery
CELERY_ACKS_LATE = True
CELERY_TASK_PUBLISH_RETRY = True
CELERY_DISABLE_RATE_LIMITS = False

if DEBUG:
    CELERY_ALWAYS_EAGER = True
    CELERY_EAGER_PROPAGATES_EXCEPTIONS = True
else:
    CELERY_DEFAULT_QUEUE = 'swipe4rights-stg'
    if PRODUCTION:
        CELERY_DEFAULT_QUEUE = 'swipe4rights-prd'

    CELERY_QUEUES = {
        CELERY_DEFAULT_QUEUE: {
            'exchange': CELERY_DEFAULT_QUEUE,
            'binding_key': CELERY_DEFAULT_QUEUE,
        }
    }

    CELERYBEAT_SCHEDULE = {
    }

    BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
    CELERY_TASK_RESULT_EXPIRES = 18000

# Sentry
if not DEBUG:
    sentry_sdk.init(
        dsn="Sentry DSN",
        integrations=[DjangoIntegration()]
    )

if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'root': {
            'level': 'WARNING',
            'handlers': ['sentry'],
        },
        'formatters': {
            'verbose': {
                'format': '%(levelname)s %(asctime)s %(module)s '
                          '%(process)d %(thread)d %(message)s'
            },
        },
        'handlers': {
            'sentry': {
                'level': 'ERROR',  # noqa: E501 To capture more than ERROR, change to WARNING, INFO, etc.
                'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',  # noqa: E501
                'tags': {'custom-tag': 'x'},
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            }
        },
        'loggers': {
            'django.db.backends': {
                'level': 'ERROR',
                'handlers': ['console'],
                'propagate': False,
            },
            'raven': {  # NOQA
                'level': 'DEBUG',
                'handlers': ['console'],
                'propagate': False,
            },
            'sentry.errors': {
                'level': 'DEBUG',
                'handlers': ['console'],
                'propagate': False,
            },
        },
    }

# Raven

if STAGING or PRODUCTION:
    DSN = os.environ.get('RAVEN_DSN')
    if DSN:
        RAVEN_CONFIG = {
            'dsn': DSN,
            # If you are using git, you can also automatically configure the
            # release based on the git info.
            # 'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),
        }

# Mailchimp / Email
MAILCHIMP_API_KEY = os.environ.get('MAILCHIMP_API_KEY', '')
MAILCHIMP_DEFAULT_LIST_ID = os.environ.get('MAILCHIMP_DEFAULT_LIST_ID', '')
MANDRILL_API_KEY = os.environ.get('MANDRILL_API_KEY', '')
POSTSAFE_WHITELISTED_EMAILS = [r'.+']
POSTSAFE_WHITELIST_ON = not PRODUCTION and not STAGING
POSTSAFE_TEST_MODE = False

EMAIL_SUBJECT_PREFIX = ''
if not PRODUCTION:
    EMAIL_SUBJECT_PREFIX = "%s %s" % ('[STAGING]', EMAIL_SUBJECT_PREFIX)

DEFAULT_FROM_EMAIL = 'george@washington.gov'
EMAIL_REPLY_TO = DEFAULT_FROM_EMAIL
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_HOST = 'smtp.mandrillapp.com'
EMAIL_PORT = 587
EMAIL_BACKEND = 'helpers.postsafe.django_backend.PostSafeEmailBackend'
EMAIL_UPDATE_INTERVAL_MINUTES = 15


# App Configs
SITE_URL = os.environ.get('SITE_URL', '')
GIT_SHA = os.environ.get('HEROKU_SLUG_COMMIT', '')
# If there is a sha make it an extension
GIT_SHA_EXT = '.%s' % GIT_SHA if GIT_SHA else ''
